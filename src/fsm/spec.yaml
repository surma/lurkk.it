--- |
  /**
   * @license
   * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */

  // Itâ€™s too hard to make generated code linter compliant
  /* tslint:disable */

  import { Subreddit } from "../repository/storage-model/subreddit.js";
  import { Thread } from "../repository/storage-model/thread.js";
  import { View, ViewType } from "../repository/view.js";
  import * as Repository from "../repository";

  import {
    AnyNode,
    Effect,
    Guard,
    Loopback,
    not,
    NoTrigger,
    StateMachine,
    State
  } from "westend/src/state-machine/state-machine.js";

  function genUid() {
    let uid = "";
    for (let i = 0; i < 16; i++) {
      uid += String.fromCharCode(Math.floor(97 + Math.random() * 26));
    }

    return uid;
  }

---
fsm_variable: fsm
output_file: generated.ts
nodes:
  - name: STACK_VIEW

triggers:
  - name: VIEW_SUBREDDIT
    payload:
      id: string
  - name: VIEW_THREAD
    payload:
      id: string
  - name: DISMISS
  - name: REFRESH
  - name: DOWNLOAD
    payload:
      ids: string[]
  - name: TOGGLE_FAVORITE
    payload:
      id: string

--- |
  export type LoadingEntry = string;

  export interface Value {
    loading: LoadingEntry[];
    favorites: string[];
    stack: View[];
  }

  export const fsm = new StateMachine<Node, TriggerPayloadMap, Value>(
    Node.STACK_VIEW,
    {
      loading: [],
      favorites: [],
      stack: [],
    }
  );

  function startLoading(fsm: StateMachine<Node, TriggerPayloadMap, Value>, loadingEntry: LoadingEntry) {
    const value = fsm.value;
    value.loading.push(loadingEntry);
    fsm.setValue(value);
  }

  function stopLoading(fsm: StateMachine<Node, TriggerPayloadMap, Value>, loadingEntry: LoadingEntry) {
    const value = fsm.value;
    value.loading = value.loading.filter(f => f !== loadingEntry);
    fsm.setValue(value);
  }

  const loadThread: Effect<Node, Trigger.VIEW_THREAD, TriggerPayloadMap, Value> = async (fsm, trigger, payload) => {
    startLoading(fsm, payload.id);
    const [thread, comments] = await Repository.loadThread(payload.id);
    fsm.value.stack.push({
      type: ViewType.THREAD,
      uid: genUid(),
      thread,
      comments
    });
    stopLoading(fsm, payload.id);
  }

  const loadSubreddit: Effect<Node, Trigger.VIEW_SUBREDDIT, TriggerPayloadMap, Value> = async (fsm, trigger, payload) => {
    startLoading(fsm, payload.id);
    const subreddit = await Repository.loadSubreddit(payload.id);
    fsm.value.stack.push({
      type: ViewType.SUBREDDIT,
      uid: genUid(),
      subreddit
    });
    stopLoading(fsm, payload.id);
  }

  const dismiss: Effect<Node, Trigger.DISMISS, TriggerPayloadMap, Value> = async (fsm, trigger, payload) => {
    fsm.value.stack.pop();
  }

  const refresh: Effect<Node, Trigger.REFRESH, TriggerPayloadMap, Value> = async (fsm, trigger, payload) => {
    if(fsm.value.stack.length <= 0) {
      return;
    }
    startLoading(fsm, "refresh");
    const topView = fsm.value.stack.pop()!;
    fsm.setValue(fsm.value);
    let id;
    switch(topView.type) {
      case ViewType.THREAD:
        id = topView.thread.id;
        await Repository.refreshThread(id);
        fsm.emitTrigger<Trigger.VIEW_THREAD>(
          Trigger.VIEW_THREAD,
          { id }
        );
        break;
      case ViewType.SUBREDDIT:
        id = topView.subreddit.id;
        await Repository.refreshSubreddit(id);
        fsm.emitTrigger<Trigger.VIEW_SUBREDDIT>(
          Trigger.VIEW_SUBREDDIT,
          { id }
        );
        break;
    }
    stopLoading(fsm, "refresh");
  }

  const download: Effect<Node, Trigger.DOWNLOAD, TriggerPayloadMap, Value> = async (fsm, trigger, payload) => {
    for(const id of payload.ids) {
      Promise.resolve().then(async () => {
        startLoading(fsm, `download-${id}`);
        await Repository.refreshThread(id);
        const cacheDate = await Repository.cacheDate(id);
        fsm.value.stack
          .forEach(view => {
            if(view.type !== ViewType.SUBREDDIT) {
              return;
            }
            view.subreddit.items
              .filter(item => item.id === id)
              .forEach(item => item.cachedAt = cacheDate);
          });
        stopLoading(fsm, `download-${id}`);
      });
    }
  }

  const toggleFavorite: Effect<Node, Trigger.TOGGLE_FAVORITE, TriggerPayloadMap, Value> = async (fsm, trigger, payload) => {
    await Repository.toggleFavorite(payload.id);
    fsm.value.favorites = await Repository.getFavorites();
  }

---
transitions:
  - origin: STACK_VIEW
    trigger: VIEW_SUBREDDIT
    target: STACK_VIEW
    effects: [loadSubreddit]
  - origin: STACK_VIEW
    trigger: VIEW_THREAD
    target: STACK_VIEW
    effects: [loadThread]
  - origin: AnyNode
    trigger: DISMISS
    target: Loopback
    effects: [dismiss]
  - origin: AnyNode
    trigger: REFRESH
    target: Loopback
    effects: [refresh]
  - origin: AnyNode
    trigger: DOWNLOAD
    target: Loopback
    effects: [download]
  - origin: AnyNode
    trigger: TOGGLE_FAVORITE
    target: Loopback
    effects: [toggleFavorite]

--- |
  export const READY_CHANNEL = "fsm.ready";

  export async function init() {
    fsm.value.favorites = await Repository.getFavorites();
  }

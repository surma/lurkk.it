--- |
  /**
   * @license
   * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */

  // Itâ€™s too hard to make generated code linter compliant
  /* tslint:disable */

  import * as Types from "../model/types.js";
  import * as Model from "../model/model.js";

  import { Effect, Guard, not, NoTrigger, StateMachine, Snapshot } from "westend/src/state-machine/state-machine.js";

  const topViewPredicate = (f: (view: View) => boolean): Guard<State, TriggerPayloadMap, DataObject> => {
    return (fsm, trigger, payload) => {
      if(fsm.data.stack.length <= 0) {
        return false;
      }
      return f(fsm.data.stack[fsm.data.stack.length - 1]);
    };
  };

  const isLoadRequestOfType = (lrt: LoadRequestType): Guard<State, TriggerPayloadMap, DataObject> => {
    return (fsm, trigger, payload) => !!fsm.data.loadRequest && fsm.data.loadRequest.type === lrt;
  }

  const storeLoadRequest: Effect<State, TriggerPayloadMap, DataObject> = async (fsm, trigger, payload) => {
    fsm.data.loadRequest = payload.loadRequest;
  };

  const loadThread: Effect<State, TriggerPayloadMap, DataObject> = async (fsm, trigger, payload) => {
    const loadRequest= fsm.data.loadRequest;
    if(!loadRequest || loadRequest.type !== LoadRequestType.THREAD) {
      throw new Error ("loadRequest is not of type THREAD");
    }
   
    // Run this code concurrently to the state machine
    Promise.resolve().then(async () => {
      const [thread, comments] = await Model.loadThread(loadRequest.id);
      fsm.data.stack.push({
        view: ViewType.THREAD,
        thread,
        comments
      });
      delete fsm.data.loadRequest;
      fsm.emitTrigger(Trigger.LOADING_DONE);
    });
  };

  const loadSubreddit: Effect<State, TriggerPayloadMap, DataObject> = async (fsm, trigger, payload) => {
    const loadRequest = fsm.data.loadRequest;
    if(!loadRequest || loadRequest.type !== LoadRequestType.SUBREDDIT) {
      throw new Error ("loadRequest is not of type SUBREDIT");
    }

    // Run this code concurently to the state machien
    Promise.resolve().then(async () => {
      const subreddit = await Model.loadSubreddit(loadRequest.id);
      fsm.data.stack.push({
        view: ViewType.SUBREDDIT,
        subreddit
      });
      delete fsm.data.loadRequest;
      fsm.emitTrigger(Trigger.LOADING_DONE);
    });
  };

---
fsm_variable: fsm
output_file: generated.ts
states:
  - name: INIT
  - name: RECOVER
  - name: DISPATCH
  - name: LOAD
  - name: SUBREDDIT
  - name: THREAD

triggers:
  - name: LOAD_REQUEST
    payload:
      loadRequest: LoadRequest
  - name: LOADING_DONE

--- |
  export enum ViewType {
    SUBREDDIT,
    THREAD,
    EMPTY
  }

  export interface SubredditView {
    view: ViewType.SUBREDDIT;
    subreddit: Types.Subreddit;
  }

  export interface ThreadView {
    view: ViewType.THREAD;
    thread: Types.Thread;
    comments: Types.Comment[];
  }

  export interface EmptyView {
    view: ViewType.EMPTY;
  }

  export type View = SubredditView | ThreadView | EmptyView;

  export enum LoadRequestType {
    SUBREDDIT,
    THREAD
  }

  export interface SubredditLoadRequest {
    type: LoadRequestType.SUBREDDIT;
    id: Types.SubredditID;
  }

  export interface ThreadLoadRequest {
    type: LoadRequestType.THREAD;
    id: Types.ThreadID;
  }

  export type LoadRequest = SubredditLoadRequest | ThreadLoadRequest;

  export interface DataObject {
    loadRequest?: LoadRequest;
    favorites: Types.SubredditID[];
    stack: View[];
  }

  export const fsm = new StateMachine<State, TriggerPayloadMap, DataObject>(
    State.INIT,
    {
      favorites: ["deine_mudda", "lol"],
      stack: [],
    }
  );

---
transitions:
  - origin: State.INIT
    trigger: Trigger.LOAD_REQUEST
    target: State.DISPATCH
    effects: [storeLoadRequest]
  - origin: State.DISPATCH
    trigger: NoTrigger
    target: State.LOAD
    guards: [isLoadRequestOfType(LoadRequestType.SUBREDDIT)]
    effects: [loadSubreddit]
  - origin: State.DISPATCH
    trigger: NoTrigger
    target: State.LOAD
    guards: [isLoadRequestOfType(LoadRequestType.THREAD)]
    effects: [loadThread]
  - origin: State.LOAD
    trigger: Trigger.LOADING_DONE
    target: State.SUBREDDIT
    guards: [topViewPredicate(view => view.view === ViewType.SUBREDDIT)]
  - origin: State.LOAD
    trigger: Trigger.LOADING_DONE
    target: State.THREAD
    guards: [topViewPredicate(view => view.view === ViewType.THREAD)]
  - origin: State.THREAD
    trigger: Trigger.LOAD_REQUEST
    target: State.DISPATCH
    effects: [storeLoadRequest]
  - origin: State.SUBREDDIT
    trigger: Trigger.LOAD_REQUEST
    target: State.DISPATCH
    effects: [storeLoadRequest]

--- |
  export const FSM_READY = "fsm.ready";
  export const FSM_STATECHANGE = "fsm.stateChange";
